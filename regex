{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMaV+HtRomolRNC11U25Db8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abibat17/DS_pythons/blob/main/regex\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XLAs5XS2kiw6",
        "outputId": "5c021bb0-e60c-451a-c91b-5d0477bd68e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Captured Group: 123\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "# The string to be searched\n",
        "text = \"abc123\"\n",
        "# Regex pattern with a capturing group for one or more digits\n",
        "pattern = r\"(\\d+)\"\n",
        "# Searching the text for the pattern\n",
        "match = re.search(pattern, text)\n",
        "# Checking if a match is found\n",
        "if match:\n",
        " # Retrieving the first captured group\n",
        " captured_group = match.group(1)\n",
        " print(\"Captured Group:\", captured_group)\n",
        "else:\n",
        " print(\"No match found.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "text = \"The quick brown fox jumps over 12 lazy dogs.\"\n",
        "# Find any word of at least 4 characters\n",
        "# {4,} is a greedy match\n",
        "import re\n",
        "\n",
        "text = \"This is a string with some words in it.\"\n",
        "\n",
        "# Find words with at least 4 characters\n",
        "print(re.findall(r\"\\b\\w{4,}\\b\", text))\n",
        "\n",
        "# Find 'o' followed by one or more 'g's\n",
        "print(re.findall(r\"og+\", text))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ILCyBkFk5sZ",
        "outputId": "e36309cc-929d-45f2-ffbf-b26785af6f85"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['This', 'string', 'with', 'some', 'words']\n",
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "text = \"The quick brown fox jumps over 12 lazy dogs.\"\n",
        "# Find any word of at least 4 characters\n",
        "# {4,} is a greedy match\n",
        "print(re.findall(r\"\\b\\w{4,}\\b\", text))\n",
        "# Find 'o' followed by one or more 'g's\n",
        "print(re.findall(r\"og+\", text))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jmjDrKQQlUD_",
        "outputId": "e00c49c7-799b-4482-8871-e11b1a4dd814"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['quick', 'brown', 'jumps', 'over', 'lazy', 'dogs']\n",
            "['og']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "text = \"Python is an amazing programming language.\"\n",
        "pattern = \"amazing\"\n",
        "match = re.search(pattern, text)\n",
        "if match:\n",
        " print(\"Match found:\", match.group())\n",
        " print(\"Match starts at position:\", match.start())\n",
        "else:\n",
        " print(\"No match found.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HOATGFDLslVN",
        "outputId": "f70c8198-6509-4d73-d06d-faf19e1be290"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Match found: amazing\n",
            "Match starts at position: 13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "pattern = \"Hello\"\n",
        "text = \"Hello, world!\"\n",
        "# Using re.match to find pattern at the start of the text\n",
        "match = re.match(pattern, text)\n",
        "if match:\n",
        " print(\"Match found:\", match.group())\n",
        "else:\n",
        " print(\"No match found.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qn8O8sf2thad",
        "outputId": "11517a2a-3ae2-46a4-a911-79cda4560034"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Match found: Hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "text = \"The dates are 2023-01-01, 2024-02-02\"\n",
        "# Single capturing group\n",
        "pattern = r\"(\\d{4}-\\d{2}-\\d{2})\"\n",
        "# Multiple capturing groups\n",
        "pattern_multiple = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n",
        "dates = re.findall(pattern, text)\n",
        "date_parts = re.findall(pattern_multiple, text)\n",
        "print(dates) # Output: ['2023-01-01', '2024-02-02']\n",
        "print(date_parts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4kO3zbs0uPNF",
        "outputId": "bc6b4f6b-4b7e-4e48-8b51-892669e4000f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['2023-01-01', '2024-02-02']\n",
            "[('2023', '01', '01'), ('2024', '02', '02')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "text = \"The rain in Spain stays mainly in the plain.\"\n",
        "pattern = r\"\\bS\\w+\"\n",
        "matches = re.finditer(pattern, text)\n",
        "for match in matches:\n",
        "    print(f\"Match: {match.group()} at Position: {match.span()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3tUFIh5Rvcnt",
        "outputId": "c83e36f0-8318-48bd-f497-7d93f70551f0"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Match: Spain at Position: (12, 17)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "text = \"I love Python. Python is great for scripting.\"\n",
        "#Python can be used for data analysis.\"\n",
        "pattern = \"Python\"\n",
        "replacement = \"Java\"\n",
        "# Replace all occurrences of 'Python' with 'Java'\n",
        "result = re.sub(pattern, replacement, text)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zr7QrRNfxTJM",
        "outputId": "80c15fc9-5491-4272-cd88-e566e2e3290a"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I love Java. Java is great for scripting.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "text = \"Words, separated, 1, by, commas (and some spaces)\"\n",
        "pattern = \",\\s*\" # Comma followed by zero or more spaces\n",
        "result = re.split(pattern, text)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SGmKIeFxzhrT",
        "outputId": "a98d1146-91a1-4096-c969-3a9c0c2f1e6d"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Words', 'separated', '1', 'by', 'commas (and some spaces)']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "# Compile the regex pattern for a simple word match\n",
        "pattern = re.compile(r'hello')\n",
        "# Sample text\n",
        "text = \"Hello, world!\"\n",
        "# Using the compiled pattern to search in the text\n",
        "match = pattern.search(text)\n",
        "if match:\n",
        " print(\"Match found\")\n",
        "else:\n",
        " print(\"No match found\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yg1F-mbc0OjW",
        "outputId": "b15ad220-dad1-458d-fe32-89cf065046d4"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No match found\n"
          ]
        }
      ]
    }
  ]
}